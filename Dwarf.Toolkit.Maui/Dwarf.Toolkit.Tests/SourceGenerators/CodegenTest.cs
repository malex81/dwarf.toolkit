using Dwarf.Toolkit.Maui.SourceGenerators;
using NUnit.Framework;

namespace Dwarf.Toolkit.Tests.SourceGenerators;

[TestFixture]
internal partial class CodegenTest
{
	[TestCase]
	public void SimpleBindableProperty()
	{
		var source = """
			using Microsoft.Maui.Controls;
			using Dwarf.Toolkit.Maui;

			namespace SingleSimpleProp;

			partial class Container : BindableObject
			{
				[BindableProperty]
				public partial string MyProp { get; set; }
			}
			""";

		var result = """
			// <auto-generated/>
			#pragma warning disable
			#nullable enable
			namespace SingleSimpleProp;
			/// <inheritdoc/>
			partial class Container
			{
				public static readonly BindableProperty MyPropProperty = BindableProperty.Create(nameof(MyProp), typeof(string), typeof(Container));
				/// <inheritdoc/>
				[global::System.CodeDom.Compiler.GeneratedCode("Dwarf.Toolkit.Maui.SourceGenerators.BindablePropertyGenerator", <ASSEMBLY_VERSION>)]
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				partial string MyProp { get => (string)GetValue(MyPropProperty); set => SetValue(MyPropProperty, value); }
			}
			""";

		VerifyGenerateSources(source, [new BindablePropertyGenerator()], ("SingleSimpleProp.Container.g.cs", result));
	}

	[TestCase]
	public void MultiSimpleBindableProperties()
	{
		var source = """
			using Microsoft.Maui.Controls;
			using Dwarf.Toolkit.Maui;

			namespace MultiSimpleProps;

			partial class Container : BindableObject
			{
				[BindableProperty]
				public partial string TextProp { get; set; }

				[BindableProperty]
				public partial int? NumProp { get; set; }
			}
			""";

		var result = """
			// <auto-generated/>
			#pragma warning disable
			#nullable enable
			namespace MultiSimpleProps;
			/// <inheritdoc/>
			partial class Container
			{
				public static readonly BindableProperty TextPropProperty = BindableProperty.Create(nameof(TextProp), typeof(string), typeof(Container));
				/// <inheritdoc/>
				[global::System.CodeDom.Compiler.GeneratedCode("Dwarf.Toolkit.Maui.SourceGenerators.BindablePropertyGenerator", <ASSEMBLY_VERSION>)]
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				partial string TextProp { get => (string)GetValue(TextPropProperty); set => SetValue(TextPropProperty, value); }
			
				public static readonly BindableProperty NumPropProperty = BindableProperty.Create(nameof(NumProp), typeof(int?), typeof(Container));
				/// <inheritdoc/>
				[global::System.CodeDom.Compiler.GeneratedCode("Dwarf.Toolkit.Maui.SourceGenerators.BindablePropertyGenerator", <ASSEMBLY_VERSION>)]
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				partial int? NumProp { get => (int?)GetValue(NumPropProperty); set => SetValue(NumPropProperty, value); }
			}
			""";

		VerifyGenerateSources(source, [new BindablePropertyGenerator()], ("MultiSimpleProps.Container.g.cs", result));
	}
}